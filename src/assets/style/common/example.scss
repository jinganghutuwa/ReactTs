// mixin操作文件


// 使用示例
// @mixin firefox-message($selector) {
//     body.firefox #{$selector}:before {
//       content: "Hi, Firefox users!";
//     }
//   }
//   @include firefox-message(".header");
//   编译为
//   body.firefox .header:before {
//     content: "Hi, Firefox users!"; }

// @mixin sexy-border($color, $width: 1in) {
//     border: {
//       color: $color;
//       width: $width;
//       style: dashed;
//     }
//   }
//   p { @include sexy-border(blue); }
//   h1 { @include sexy-border(blue, 2in); }
//   编译为
//   p {
//     border-color: blue;
//     border-width: 1in;
//     border-style: dashed; }
  
//   h1 {
//     border-color: blue;
//     border-width: 2in;
//     border-style: dashed; }


// 10. 函数指令 (Function Directives)
// Sass 支持自定义函数，并能在任何属性值或 Sass script 中使用：
// $grid-width: 40px;
// $gutter-width: 10px;
// @function grid-width($n) {
//   @return $n * $grid-width + ($n - 1) * $gutter-width;
// }
// #sidebar { width: grid-width(5); }
// 编译为
// #sidebar {
//   width: 240px; }
// 与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 @return 输出结果。
// 自定义的函数也可以使用关键词参数，上面的例子还可以这样写：
// #sidebar { width: grid-width($n: 5); }
// 建议在自定义函数前添加前缀避免命名冲突，其他人阅读代码时也会知道这不是 Sass 或者 CSS 的自带功能。
// 自定义函数与 mixin 相同，都支持 variable arguments


// 在有引号的文本字符串中使用 #{} 插值语句可以添加动态的值：
// p:before {
//   content: "I ate #{5 + 10} pies!";
// }
// 编译为
// p:before {
//   content: "I ate 15 pies!"; }


// 假设 example.scss 文件包含以下样式：
// .example {
//   color: red;
// }
// 然后导入到 #main 样式内
// #main {
//   @import "example";
// }
// 将会被编译为
// #main .example {
//   color: red;
// }






// @extend使用示例
// .error {
//     border: 1px #f00;
//     background-color: #fdd;
//   }
//   .error.intrusion {
//     background-image: url("/image/hacked.png");
//   }
//   .seriousError {
//     @extend .error;
//     border-width: 3px;
//   }
//   编译为
//   .error, .seriousError {
//     border: 1px #f00;
//     background-color: #fdd; }
//   .error.intrusion, .seriousError.intrusion {
//     background-image: url("/image/hacked.png"); }
//   .seriousError {
//     border-width: 3px; }


// 8.3. @for
// @for 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。
// 这个指令包含两种格式：@for $var from <start> through <end>，或者 
// @for $var from <start> to <end>，
// 区别在于 through 与 to 的含义：当使用 through 时，条件范围包含 <start> 与 <end> 的值，而使用 to 时条件范围只包含 <start> 的值不包含 <end> 的值。另外，$var 可以是任何变量，比如 $i；<start> 和 <end> 必须是整数值。
// @for $i from 1 through 3 {
//   .item-#{$i} { width: 2em * $i; }
// }
// 编译为
// .item-1 {
//   width: 2em; }
// .item-2 {
//   width: 4em; }
// .item-3 {
//   width: 6em; }

// 8.4. @each
// @each 指令的格式是 $var in <list>, $var 可以是任何变量名，比如 $length 或者 $name，而 <list> 是一连串的值，也就是值列表。
// @each 将变量 $var 作用于值列表中的每一个项目，然后输出结果，例如：
// @each $animal in puma, sea-slug, egret, salamander {
//   .#{$animal}-icon {
//     background-image: url('/images/#{$animal}.png');
//   }
// }
// 编译为
// .puma-icon {
//   background-image: url('/images/puma.png'); }
// .sea-slug-icon {
//   background-image: url('/images/sea-slug.png'); }
// .egret-icon {
//   background-image: url('/images/egret.png'); }
// .salamander-icon {
//   background-image: url('/images/salamander.png'); }


// 8.5. @while
// @while 指令重复输出格式直到表达式返回结果为 false。这样可以实现比 @for 更复杂的循环，只是很少会用到。例如：
// $i: 6;
// @while $i > 0 {
//   .item-#{$i} { width: 2em * $i; }
//   $i: $i - 2;
// }
// 编译为
// .item-6 {
//   width: 12em; }

// .item-4 {
//   width: 8em; }

// .item-2 {
//   width: 4em; }


// @media使用方法
// .sidebar {
//     width: 300px;
//     @media screen and (orientation: landscape) {
//       width: 500px;
//     }
//   }
//   编译为
//   .sidebar {
//     width: 300px; }
//     @media screen and (orientation: landscape) {
//       .sidebar {
//         width: 500px; } }
// @media 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 and
// @media screen {
//   .sidebar {
//     @media (orientation: landscape) {
//       width: 500px;
//     }
//   }
// }
// 编译为
// @media screen and (orientation: landscape) {
//   .sidebar {
//     width: 500px; } }
// @media 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值：
// $media: screen;
// $feature: -webkit-min-device-pixel-ratio;
// $value: 1.5;
// @media #{$media} and ($feature: $value) {
//   .sidebar {
//     width: 500px;
//   }
// }
// 编译为
// @media screen and (-webkit-min-device-pixel-ratio: 1.5) {
//   .sidebar {
//     width: 500px; } }